<?php
/**
 * Created by PhpStorm.
 * User: Isigar
 * Date: 7/2/2018
 * Time: 10:40 AM
 */

namespace Relisoft\GraphQL\DI;


use Nette;
use Nette\DI\CompilerExtension;
use Relisoft\GraphQL\Request\MainRequest;
use Relisoft\GraphQL\Request\Request;
use Relisoft\GraphQL\Tracy\TracyExtension;
use Tracy\Bar;
use Tracy\Debugger;

class GraphQLExtension extends CompilerExtension
{
    public $defaults = [
        'host' => '',
        'port' => null,
        'url' => '',
        'auth' => '',
        'autoAuth' => true,
        'sections' => [],
        'uniqParams' => []
    ];

    private $sections = [];

    public function loadConfiguration()
    {
        $config = $this->validateConfig($this->defaults,$this->config);
        $builder = $this->getContainerBuilder();
        $builder->addDefinition($this->prefix("bar"))
            ->setFactory(TracyExtension::class,["@tracy.bar","@session"]);
        $builder->addDefinition($this->prefix("request"))
            ->setFactory(MainRequest::class,[$this->makeUrl($config),$this->makeAuthUrl($config),"@session"])
            ->addSetup("setAutoAuth",[$config["autoAuth"]]);

        if(isset($config["uniqParams"])){
            if(!empty($config["uniqParams"])){
                $builder->getDefinition($this->prefix("request"))
                    ->addSetup("extendUniqParams",[$config["uniqParams"]]);
            }
        }
        $this->createSectionsConnection($builder,$config);
        parent::loadConfiguration();
    }

    /**
     * Generate services for every section in config
     */
    public function createSectionsConnection($builder,$config){
        if(isset($this->config["sections"])){
            foreach($this->config["sections"] as $key => $values){
                if(!isset($values["autoAuth"])){
                    $values["autoAuth"] = $config["autoAuth"];
                }
                if(!isset($values["auth"])){
                    $values["auth"] = $config["auth"];
                }

                $className = Nette\Utils\Strings::capitalize($key);

                $builder->addDefinition($this->prefix("section.".$key))
                    ->setFactory("Relisoft\GraphQL\Request\\".$className,[$this->makeUrl($values),$this->makeAuthUrl($values),"@session"])
                    ->addSetup("setAutoAuth",[$values["autoAuth"]]);

                if(isset($config["uniqParams"])){
                    if(!empty($config["uniqParams"])){
                        $builder->getDefinition($this->prefix("section.".$key))
                            ->addSetup("extendUniqParams",[$config["uniqParams"]]);
                    }
                }

                $this->sections[] = "graphql.section.".$key;

            }
        }
    }

    public function afterCompile(Nette\PhpGenerator\ClassType $class)
    {
        $init = $class->getMethod("initialize");
        $init->addBody('$this->getService(?);', ["graphql.bar"]);
        $init->addBody('$this->getService(?)->onCall[] = [$this->getService(?),"onCall"];',["graphql.request","graphql.bar"]);
        $init->addBody('$this->getService(?)->onAuth[] = [$this->getService(?),"onAuthCall"];',["graphql.request","graphql.bar"]);

        foreach ($this->sections as $section){
            $init->addBody('$this->getService(?)->onCall[] = [$this->getService(?),"onCall"];',[$section,"graphql.bar"]);
            $init->addBody('$this->getService(?)->onAuth[] = [$this->getService(?),"onAuthCall"];',[$section,"graphql.bar"]);
        }
        parent::afterCompile($class); // TODO: Change the autogenerated stub
    }

    protected function makeUrl($config){
        if(is_null($config['port'])){
            return $config['host']."/".$config["url"];
        }else{
            return $config['host'].":".$config['port']."/".$config["url"];
        }
    }

    protected function makeAuthUrl($config){
        if($config["auth"]){
            if(is_null($config['port'])){
                return $config['host']."/".$config["auth"];
            }else{
                return $config['host'].":".$config['port']."/".$config["auth"];
            }
        }else{
            return null;
        }
    }
}
