#include <Sodaq_RN2483.h>
#include <Sodaq_RN2483_internal.h>
#include <Utils.h>

// Lab3.ino

/*
    (c) 2016 Microchip Technology Inc. and its subsidiaries. You may use this
    software and any derivatives exclusively with Microchip products.

    THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
    EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
    WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
    PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP PRODUCTS, COMBINATION
    WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION.

    IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
    INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
    WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
    BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
    FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
    ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
    THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.

    MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE OF THESE
    TERMS.
*/

#include <LoRa.h>
#define debugSerial SerialUSB
#define loraSerial  Serial2

// Variables will contain your personal OTAA Activation Keys
uint8_t devEUI[8] ;   // Device EUI
uint8_t appEUI[8] ;   // App EUI
uint8_t appKey[16] ;  // App Key
const uint8_t appKeyPrefix[8] = {0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88} ;

// Step 2 Replace here the 00â€™s by your appEUI generated by TTN
const uint8_t appEUIfromTTN[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } ;

void setup()
{
  while (!debugSerial && (millis() < 10000)) ;
	debugSerial.begin(115200) ;
  debugSerial.println("Microchip Technology ExpLoRer Starter Kit") ;
  debugSerial.println("21080_IoT3 Masters 2017 Class") ;
  debugSerial.println("Lab 3") ;

  // --------------------------------------------------------------------------
  // Init section
  // --------------------------------------------------------------------------
  // Temperature sensor
  pinMode(TEMP_SENSOR, INPUT) ;
  analogReadResolution(12) ;

  // LED
  pinMode(LED_BUILTIN, OUTPUT) ;
  pinMode(LED_RED, OUTPUT) ;
  pinMode(LED_GREEN, OUTPUT) ; 
  pinMode(LED_BLUE, OUTPUT) ;

  // LoRa
  LoRa.hwInit() ;
	loraSerial.begin(LoRa.getDefaultBaudRate()) ;
  LoRa.initLoRaStream(loraSerial) ;
  LoRa.swInit() ;

  // --------------------------------------------------------------------------
  // Activation keys section
  // --------------------------------------------------------------------------
  // Get the internal Hardware EUI of the LoRaWAN module
	uint8_t hwEUI[8] ;
  uint8_t len = LoRa.getHWEUI(hwEUI, sizeof(hwEUI)) ;
  if (len == 0) { debugSerial.println("Error to get HwEUI") ; while(1) ; }
  
  // Device EUI is the unique identifier for this device on the network
  // Assign the Hardware EUI as the devEUI key
  memcpy(devEUI, hwEUI, sizeof(hwEUI)) ;
  // App EUI is generated by the TTN Application Server
  memcpy(appEUI, appEUIfromTTN, sizeof(appEUIfromTTN)) ;
  // App Key can be a default key for all devices or can be unique per device
  // Here the key is computed by the help of the Device EUI
  // The 16-Bytes format will start by: FF EE DD CC BB AA 99 88 and 
  // will finish by: the 8 Bytes of the devEUI
  memcpy(appKey, appKeyPrefix, sizeof(appKeyPrefix)) ;
  memcpy(appKey + 8, devEUI, sizeof(devEUI)) ;

  // --------------------------------------------------------------------------
  // Display activation keys section
  // --------------------------------------------------------------------------
  debugSerial.println("") ;
  debugSerial.print("devEUI = ") ;
  displayArrayInOneLine(devEUI, sizeof(devEUI)) ;
  debugSerial.print("appEUI = ") ;
  displayArrayInOneLine(appEUI, sizeof(appEUI)) ;
  debugSerial.print("appKey = ") ;
  displayArrayInOneLine(appKey, sizeof(appKey)) ;

  // --------------------------------------------------------------------------
  // Network Activation section
  // --------------------------------------------------------------------------
  bool joinRes = 0 ;
  uint8_t joinTentative = 0 ;
  do
  {
    setRgbColor(0x00, 0x00, 0xFF) ;
    debugSerial.println("Try to join the LoRa network through OTA Activation") ;
    // Step 3 Start the join procedure and put the result into joinRes
    // ### Your code here ###
    debugSerial.println(joinRes ? "Join Accepted." : "Join Failed! Trying again after 3 seconds.") ;
    if (!joinRes)
    {
      setRgbColor(0xFF, 0x00, 0x00) ;
      joinTentative ++ ;
      delay(3000) ;
    }
    if (joinTentative == 3)
    {
      debugSerial.println("Not able to join the network. Stay here forever!") ;
      while(1)
      {
        setRgbColor(0xFF, 0x00, 0x00) ;
        delay(250) ;
        setRgbColor(0x00, 0x99, 0xFF) ;
        delay(250) ;
        setRgbColor(0xFF, 0xFF, 0xFF) ;
        delay(250) ;
      }
    }
  } while (joinRes == 0) ;
  setRgbColor(0x00, 0xFF, 0x00) ;
  delay(3000) ;
}

void loop()
{
  int sensorValue = analogRead(TEMP_SENSOR) ;
  float mVolts = (float)sensorValue * 3300 / 4096.0 ;
  float temp = (mVolts - 500) ;
  temp = temp / 10.0 ;
  debugSerial.println(temp) ;
  delay(3000) ;
  uint8_t res = 100 ; //Set to a value that will not return any message in the switch case below.UI, appKey, true, 3);
  // Step 5.1 Create the payload variable
  // ### Your code here ###
  // Step 5.2 Fill the payload with temperature value
  // ### Your code here ###
  // Step 5.3 Send a confirmed uplink message
  // ### Your code here ###
  switch (res)
  {
    case NoError:
      debugSerial.println("Successful transmission.") ;
      setRgbColor(0x00, 0xFF, 0x00) ;
      delay(2000) ;
      setRgbColor(0x00, 0x00, 0x00) ;
      break;
    case NoResponse:
      debugSerial.println("There was no response from the device.") ;
      setRgbColor(0xFF, 0x00, 0x00) ;
      break ;
    case Timeout:
      debugSerial.println("Connection timed-out. Check your serial connection to the device! Sleeping for 20sec.") ;
      setRgbColor(0xFF, 0x00, 0x00) ;
      delay(20000) ;
      break ;
    case PayloadSizeError:
      debugSerial.println("The size of the payload is greater than allowed. Transmission failed!") ;
      setRgbColor(0xFF, 0x00, 0x00) ;
      break ;
    case InternalError:
      debugSerial.println("Oh No! This shouldn't happen. Something is really wrong! Try restarting the device!\r\nThe program will now halt.") ;
      setRgbColor(0xFF, 0x00, 0x00) ;
      while (1) {} ;
      break ;
    case Busy:
      debugSerial.println("The device is busy. Sleeping for 10 extra seconds.");
      delay(10000) ;
      break ;
    case NetworkFatalError:
      debugSerial.println("There is a non-recoverable error with the network connection. You should re-connect.\r\nThe program will now halt.");
      setRgbColor(0xFF, 0x00, 0x00) ;
      while (1) {} ;
      break ;
    case NotConnected:
      debugSerial.println("The device is not connected to the network. Please connect to the network before attempting to send data.\r\nThe program will now halt.");
      setRgbColor(0xFF, 0x00, 0x00) ;
      while (1) {} ;
      break ;
    case NoAcknowledgment:
      debugSerial.println("There was no acknowledgment sent back!");
      setRgbColor(0xFF, 0x00, 0x00) ;
      break ;
    default:
      break ;
  }
  // Step 5.4 Add a 20 sec delay before restarting the loop()
  // ### Your code here ###
}

// --------------------------------------------------------------------------
// Display array in HEX format routine
// --------------------------------------------------------------------------
void displayArrayInOneLine(const uint8_t tab[], uint8_t tabSize)
{
  char c[2] ;
  for (uint8_t i = 0; i < tabSize; i++)
  {
    sprintf(c, "%02X", tab[i]) ;
    debugSerial.print(c) ;
  }
  debugSerial.println("") ;
}

// --------------------------------------------------------------------------
// LED routines
// --------------------------------------------------------------------------
#define COMMON_ANODE  // LED driving method
void setRgbColor(uint8_t red, uint8_t green, uint8_t blue)
{
  #ifdef COMMON_ANODE
    red = 255 - red ;
    green = 255 - green ;
    blue = 255 - blue ;
  #endif
  analogWrite(LED_RED, red) ;
  analogWrite(LED_GREEN, green) ;
  analogWrite(LED_BLUE, blue) ;  
}

void turnBlueLedOn()
{
  digitalWrite(LED_BUILTIN, HIGH) ;
}

void turnBlueLedOff()
{
  digitalWrite(LED_BUILTIN, LOW) ;
}

